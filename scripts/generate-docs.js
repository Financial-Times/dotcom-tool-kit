const { loadToolKitRC } = require('../core/cli/lib/rc-file')
const { TaskSchemas } = require('../lib/schemas/lib/tasks')
const { HookSchemas } = require('../lib/schemas/lib/hooks')
const { PluginSchemas } = require('../lib/schemas/lib/plugins')
const { default: $t } = require('endent')
const logger = require('winston')
const path = require('path')
const fs = require('fs/promises')
const { convertSchemas, formatModelsAsMarkdown } = require('zod2md')

function formatSchemas(title, schemas) {
  const converted = convertSchemas(schemas)
  return formatModelsAsMarkdown(converted, { title, transformName: (name) => '`' + name + '`' })
}

function formatPluginSchemas({ plugin, hooks, tasks }) {
  const tasksWithSchemas = tasks.filter((task) => TaskSchemas[task])
  const hooksWithSchemas = hooks.filter((hook) => HookSchemas[hook])
  return $t`
    ${
      PluginSchemas[plugin]
        ? formatSchemas('Plugin-wide options', [
            {
              name: plugin,
              schema: PluginSchemas[plugin]
            }
          ])
        : ''
    }
    ${
      tasksWithSchemas.length
        ? formatSchemas(
            'Task options',
            tasksWithSchemas.map((task) => ({
              name: task,
              schema: TaskSchemas[task]
            }))
          )
        : ''
    }
    ${
      hooksWithSchemas.length
        ? formatSchemas(
            'Hook options',
            hooksWithSchemas.map((hook) => ({
              name: hook,
              schema: HookSchemas[hook]
            }))
          )
        : ''
    }
	`
}

function postProcessMarkdown(markdown) {
  return markdown.replace(/^#/gm, '##').replace(/_Object containing the following properties:_\n\n/g, '')
}

async function getPluginSchemas(plugin) {
  const rcFile = await loadToolKitRC(logger, path.join('plugins', plugin), false)
  return {
    plugin: `@dotcom-tool-kit/${plugin}`,
    hooks: Object.keys(rcFile.installs),
    tasks: Object.keys(rcFile.tasks)
  }
}

const BEGIN_COMMENT = '<!-- begin autogenerated docs -->\n'
const END_COMMENT = '<!-- end autogenerated docs -->'

function replaceBetween(text, replaceWith, startMarker, endMarker) {
  const startIndex = text.indexOf(startMarker)
  if (startIndex === -1) {
    throw new Error(`Start marker "${startMarker}" not found`)
  }

  const endIndex = text.indexOf(endMarker, startIndex + startMarker.length)
  if (endIndex === -1) {
    throw new Error(`End marker "${endMarker}" not found after start marker "${startMarker}"`)
  }

  return text.slice(0, startIndex + startMarker.length) + replaceWith + text.slice(endIndex)
}

async function main() {
  const plugins = ['serverless'] //await fs.readdir('plugins')

  return await Promise.all(
    plugins.map(async (plugin) => {
      const readmePath = path.join('plugins', plugin, 'readme.md')
      const schemas = await getPluginSchemas(plugin)
      const generatedOptionsMarkdown = postProcessMarkdown(formatPluginSchemas(schemas))

      const originalReadme = await fs.readFile(readmePath, 'utf-8')
      const replacedReadme = replaceBetween(
        originalReadme,
        generatedOptionsMarkdown,
        BEGIN_COMMENT,
        END_COMMENT
      )
      await fs.writeFile(readmePath, replacedReadme, 'utf-8')
    })
  )
}

main().then(console.log, console.error)
