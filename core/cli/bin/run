#!/usr/bin/env node

/* eslint-disable @typescript-eslint/no-var-requires --
 * this is raw CJS so the lint doesn't apply
 */

const argv = require('minimist')(process.argv.slice(2), {
  boolean: ['help', 'install', 'listPlugins'],
  '--': true
})

const { rootLogger } = require('@dotcom-tool-kit/logger')
const { formatError } = require('../lib/messages')

async function main() {
  try {
    if (argv.install) {
      const installHooks = require('../lib/install').default
      await installHooks(rootLogger)
    } else if (argv.listPlugins) {
      const { listPlugins } = require('../lib')
      await listPlugins(rootLogger)
    } else if (argv.printConfig) {
      const { printConfig } = require('../lib')
      await printConfig(rootLogger)
    } else if (argv.help || argv._.length === 0) {
      const showHelp = require('../lib/help').default
      await showHelp(rootLogger, argv._)
    } else {
      const { runTasks } = require('../lib')
      if (argv['--'].length > 0) {
        // The `--` in a command such as `dotcom-tool-kit test:staged --`
        // delineates between hooks and file patterns. For example, when the
        // lint-staged task is run it will identify the files that are staged
        // and match its glob patterns and append them to the command, so that
        // the command becomes something like `dotcom-tool-kit test:staged --
        // index.js`. When this command is executed it runs the configured task
        // where the file path arguments would then be extracted.
        await runTasks(rootLogger, argv._, argv['--'])
      } else {
        await runTasks(rootLogger, argv._)
      }
    }
  } catch (error) {
    rootLogger.error(formatError(error), { skipFormat: true })
    process.exitCode = error.exitCode || 1
  }
}

main()
