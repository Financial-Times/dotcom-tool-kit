version: 2.1

orbs:
  node: circleci/node@4.6.0
  orb-tools: circleci/orb-tools@10.0.5

references:
  #
  # Workspace
  #
  container_config_node:
    &container_config_node
    working_directory: ~/project/build
    docker:
      - image: cimg/node:<< parameters.node-version >>
    parameters:
      node-version:
        default: '16.14'
        type: string

  workspace_root: &workspace_root ~/project

  attach_workspace:
    &attach_workspace
    attach_workspace:
      at: *workspace_root

  #
  # Cache creation
  #
  create_cache:
    &create_cache
    save_cache:
      key: cache-v1-{{ .Branch }}-{{ checksum "./package.json" }}
      paths:
        - ./node_modules/

  #
  # Cache restoration
  #
  restore_cache:
    &restore_cache
    restore_cache:
      keys:
        - cache-v1-{{ .Branch }}-{{ checksum "./package.json" }}

  #
  # Filters
  #
  filters_only_main:
    &filters_only_main
    branches:
      only:
        - main

  filters_only_renovate_nori:
    &filters_only_renovate_nori
    branches:
      only: /(^renovate-.*|^nori\/.*)/

  filters_ignore_tags_renovate_nori_build_main:
    &filters_ignore_tags_renovate_nori_build_main
    tags:
      ignore: /.*/
    branches:
      ignore: /(^renovate-.*|^nori\/.*|^gh-pages|^main$)/

  filters_main_branch:
    &filters_main_branch
    branches:
      only:
        - main

  filters_release_build:
    &filters_release_build
    tags:
      only:
        - /^[\w-]+-v\d+\.\d+\.\d+$/
    branches:
      ignore: /.*/

  filters_prerelease_build:
    &filters_prerelease_build
    tags:
      only:
        - /^[\w-]+-v\d+\.\d+\.\d+(?:-\w+\.\d+)$/
    branches:
      ignore: /.*/

  filters_orbs_release_build:
    &filters_orbs_release_build
    tags:
      only:
        # CircleCI doesn't allow prerelease versions to be published
        - /^orb-v\d+\.\d+\.\d+$/
    branches:
      ignore: /.*/

jobs:
  build:
    <<: *container_config_node
    steps:
      - checkout
      - *restore_cache
      - node/install-npm:
          version: '8'
      - run:
          name: Install project dependencies
          command: npm install
      - run:
          name: Compile packages
          command: npm run build
      - *create_cache
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - build

  lint:
    <<: *container_config_node
    steps:
      - *attach_workspace
      - run:
          name: Run ESLint
          command: npm run lint

  test:
    <<: *container_config_node
    steps:
      - *attach_workspace
      - run:
          name: Run package tests
          command: npm run test

  release-please:
    <<: *container_config_node
    steps:
      - *attach_workspace
      - run:
          name: Update release-please release PR
          command: npx release-please@13.17.0 release-pr --token=${RELEASE_PLEASE_GITHUB_TOKEN}
            --repo-url=${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
      - run:
          name: Release any unreleased PR merges
          command: npx release-please@13.17.0 github-release
            --token=${RELEASE_PLEASE_GITHUB_TOKEN}
            --repo-url=${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
            --monorepo-tags

  publish:
    <<: *container_config_node
    steps:
      - *attach_workspace
      - run:
          name: Set npm auth token
          command: echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" >
            ${HOME}/.npmrc
      - run:
          name: NPM publish
          command: ./scripts/circleci-publish.sh

  prepublish:
    <<: *container_config_node
    steps:
      - *attach_workspace
      - run:
          name: Set npm auth token
          command: echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" >
            ${HOME}/.npmrc
      - run:
          name: NPM publish
          command: ./scripts/circleci-publish.sh --tag=prerelease

workflows:
  version: 2

  build-test:
    when:
      not:
        equal:
          - scheduled_pipeline
          - << pipeline.trigger_source >>
    jobs:
      - build:
          filters:
            <<: *filters_ignore_tags_renovate_nori_build_main
          name: build-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - test:
          requires:
            - build-v<< matrix.node-version >>
          name: test-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - lint:
          requires:
            - build-v<< matrix.node-version >>
          name: lint-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]

  release-please:
    when:
      not:
        equal:
          - scheduled_pipeline
          - << pipeline.trigger_source >>
    jobs:
      - release-please:
          filters:
            <<: *filters_only_main

  renovate-nori-build-test:
    when:
      not:
        equal:
          - scheduled_pipeline
          - << pipeline.trigger_source >>
    jobs:
      - waiting-for-approval:
          type: approval
          filters:
            <<: *filters_only_renovate_nori
      - build:
          requires:
            - waiting-for-approval
          name: build-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - test:
          requires:
            - build-v<< matrix.node-version >>
          name: test-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - lint:
          requires:
            - build-v<< matrix.node-version >>
          name: lint-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]

  build-test-publish:
    when:
      not:
        equal:
          - scheduled_pipeline
          - << pipeline.trigger_source >>
    jobs:
      - build:
          filters:
            <<: *filters_release_build
          name: build-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - test:
          filters:
            <<: *filters_release_build
          requires:
            - build-v<< matrix.node-version >>
          name: test-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - lint:
          filters:
            <<: *filters_release_build
          requires:
            - build-v<< matrix.node-version >>
          name: lint-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - publish:
          context: npm-publish-token
          filters:
            <<: *filters_release_build
          requires:
            - lint-v16.14
            - test-v16.14

  build-test-prepublish:
    when:
      not:
        equal:
          - scheduled_pipeline
          - << pipeline.trigger_source >>
    jobs:
      - build:
          filters:
            <<: *filters_prerelease_build
          name: build-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - test:
          filters:
            <<: *filters_prerelease_build
          requires:
            - build-v<< matrix.node-version >>
          name: test-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - lint:
          filters:
            <<: *filters_prerelease_build
          requires:
            - build-v<< matrix.node-version >>
          name: lint-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - prepublish:
          context: npm-publish-token
          filters:
            <<: *filters_prerelease_build
          requires:
            - lint-v16.14
            - test-v16.14

  nightly:
    when:
      and:
        - equal:
            - scheduled_pipeline
            - << pipeline.trigger_source >>
        - equal:
            - nightly
            - << pipeline.schedule.name >>
    jobs:
      - build:
          context: next-nightly-build
          name: build-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]
      - test:
          requires:
            - build-v<< matrix.node-version >>
          context: next-nightly-build
          name: test-v<< matrix.node-version >>
          matrix:
            parameters:
              node-version: [ '16.14', '14.19' ]

  # Prior to producing a development orb (which requires credentials) basic validation, linting, and even unit testing can be performed.
  # This workflow will run on every commit
  orb-test-pack:
    when:
      not:
        equal:
          - scheduled_pipeline
          - << pipeline.trigger_source >>
    jobs:
      # Lint Yaml files
      - orb-tools/lint:
          lint-dir: orb
      # Pack orb source
      - orb-tools/pack:
          source-dir: orb/src
      # Publish development version(s) of the orb.
      - orb-tools/publish-dev:
          orb-name: financial-times/dotcom-tool-kit
          requires:
            - orb-tools/lint
            - orb-tools/pack

  orb-integration-test_deploy:
    when:
      not:
        equal:
          - scheduled_pipeline
          - << pipeline.trigger_source >>
    jobs:
      # Lint Yaml files
      - orb-tools/lint:
          lint-dir: orb
          filters:
            <<: *filters_orbs_release_build
      # Pack orb source
      - orb-tools/pack:
          source-dir: orb/src
          filters:
            <<: *filters_orbs_release_build
      - orb-tools/publish:
          attach-workspace: true
          # Strip leading 'orb-v' from git tag
          orb-ref: financial-times/dotcom-tool-kit@${CIRCLE_TAG:5}
          filters:
            <<: *filters_orbs_release_build
          requires:
            # - integration-test-1
            - orb-tools/lint
            - orb-tools/pack
