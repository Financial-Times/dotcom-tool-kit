import * as yaml from 'js-yaml'
import path from 'path'
import { promises as fs } from 'fs'

type Workflow = {
  jobs?: (string | { [job: string]: unknown })[]
}

interface CircleConfig {
  version: number
  orbs: { [orb: string]: string }
  workflows?: {
    version: number
    [workflow: string]: Workflow | number
  }
}

const automatedComment = '# CONFIG GENERATED BY DOTCOM-TOOL-KIT, DO NOT EDIT BY HAND\n'

export default abstract class CircleCiConfigHook {
  circleConfigPath = path.resolve(process.cwd(), '.circleci/config.yml')
  _circleConfigRaw?: string
  _circleConfig?: CircleConfig
  abstract job: string

  async getCircleConfigRaw(): Promise<string | undefined> {
    if (!this._circleConfigRaw) {
      try {
        this._circleConfigRaw = await fs.readFile(this.circleConfigPath, 'utf8')
      } catch (err) {
        // Not an error if config file doesn't exist
        if (err.code !== 'ENOENT') {
          throw err
        }
      }
    }

    return this._circleConfigRaw
  }

  async getCircleConfig(): Promise<CircleConfig | undefined> {
    if (!this._circleConfig) {
      const rawConfig = await this.getCircleConfigRaw()
      if (rawConfig) {
        this._circleConfig = yaml.load(rawConfig) as CircleConfig
      }
    }

    return this._circleConfig
  }

  async check(): Promise<boolean> {
    const config = await this.getCircleConfig()
    const workflows = config?.workflows
    // If the config has just one workflow defined check that one, else check
    // the workflow named 'tool-kit'
    const workflowName =
      workflows && Object.keys(workflows).length === 2
        ? // If the objects has two keys we know at least one isn't 'version'
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          Object.keys(workflows).find((workflow) => workflow !== 'version')!
        : 'tool-kit'
    const workflow = workflows?.[workflowName] as Workflow | undefined
    const jobs = workflow?.jobs
    if (!jobs) {
      return false
    }

    return jobs.some(
      (job) =>
        (typeof job === 'string' && job === this.job) ||
        (typeof job === 'object' && job.hasOwnProperty(this.job))
    )
  }

  async install(): Promise<void> {
    const rawConfig = await this.getCircleConfigRaw()
    if (rawConfig && !rawConfig.startsWith(automatedComment)) {
      throw new Error(
        `Please update your CircleCI config to include the \`${this.job}\` job in the 'tool-kit' workflow`
      )
    }

    const config = (await this.getCircleConfig()) ?? {
      version: 2.1,
      orbs: { 'tool-kit': 'financial-times/dotcom-tool-kit@dev:alpha' },
      workflows: { version: 2, 'tool-kit': { jobs: [] } }
    }

    if (!(config.workflows?.['tool-kit'] as Workflow).jobs) {
      throw new Error(
        'Found malformed CircleCI config that was automatically generated. Please delete and install again'
      )
    }
    // TypeScript can't seem to pick up that we've already checked the optional
    // properties here
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const workflow = config.workflows!['tool-kit'] as Workflow
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    workflow.jobs!.push(this.job)

    const serialised = automatedComment + yaml.dump(config)
    await fs.writeFile(this.circleConfigPath, serialised)
  }
}
